name: CI

on:
  push:
    branches: [ "master", "r[0-9][0-9].[0-9][0-9]",  "r[0-9][0-9].[0-9]"]
    
  pull_request:
    branches: [ "master", "r[0-9][0-9].[0-9][0-9]",  "r[0-9][0-9].[0-9]"]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout codebase
        id: code
        uses: actions/checkout@v3

      - name: Run a one-line script
        env:
          AWS: '{"sample":{"cluster_name":"sample","account_id":"12345"},"sample1":{"cluster_name":"sample1","account_id":"54321"}}'
        run: |
          if [ ${{ github.event_name }} = push ]
          then
            echo ${{ fromJson(env.AWS).sample.cluster_name }}
          fi
        
      - uses: actions/github-script@v6
        id: my-script
        with:
          script: |
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })
            
            const { data: job } = await github.rest.actions.getJobForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: jobs.jobs[0].id
            })
            
            console.log(job)
            console.log(job.steps.filter(step => step.name = 'Run terraform init')[0])
            return `${jobs.jobs[0].html_url}#step:${job.steps.filter(step => step.name = 'Run terraform init')[0].number}:1`
            
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            
            // 2. Prepare format of the comment
            const output = `[Show Plan](${{ steps.my-script.outputs.result }})
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

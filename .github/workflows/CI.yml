name: Build

on:
  push:
    branches:
      - master
    
  pull_request:
    branches:
      - master

  workflow_dispatch:
    inputs:
      environment:
        required: false
        type: choice
        options:
          - devl
          - prod
        
concurrency: build-${{ inputs.environment }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - run: sleep 30
      
      - id: py
        shell: python
        run: |
          import requests
          import json
          
          res = requests.get('http://api.plos.org/search?q=title:DNA').json()
          
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'json={[x for x in res["response"]["docs"]]}', file=fh)
        
      - run: |
          echo ${{ inputs.environment || 'prod' }}  
          
          job_status=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs | jq -r '.jobs[] | select(.name == "${{ github.job }}") | .steps[].conclusion')
          echo $job_status
      
      - run: echo ${{ contains(fromJSON(format('["{0}"]', inputs.environment)), 'devl') }}
        
      - name: Github event
        env:
          sample1: ${{ true && format('true-{0}', inputs.environment) || '' }}
        run: |
          echo ${{ env.sample1 }}
          echo '${{ toJSON(github.event) }}'

      - name: Run a one-line script
        env:
          AWS: '{"sample":{"cluster_name":"sample","account_id":"12345"},"sample1":{"cluster_name":"sample1","account_id":"54321"}}'
        run: echo ${{ fromJson(env.AWS).sample.cluster_name }}
            
      - uses: actions/github-script@v6
        with:
          script: |
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            })
            filenames = []
            files = commit.files.filter(file => file.status == 'modified').forEach(file => filenames.push(file.filename))
            console.log(filenames)
            
  trigger:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            sha_short = context.sha.substr(0, 7)
            
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'CD.yml',
              client_payload: {
                sha: context.sha,
                sha_short: sha_short
              }
            })
